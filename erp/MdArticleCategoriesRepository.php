<?php

namespace Admin\MasterDataBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MdArticleCategoriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MdArticleCategoriesRepository extends EntityRepository
{
    function getCategoryArray(array $criteria, array $order_by=null)
    {
        $category = array();
        $obj_divisions = $this->findBy($criteria, $order_by);
        foreach($obj_divisions as $k=>$v){
            $category[$v->getId()] = $v->getName();
        }
        return $category;
    }

    public function getAsArray($id_categ) {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT a.name, a.description, a.short_name, a.margin, a.transport_margin, 
                    GROUP_CONCAT(aat.attribute_code ORDER BY aat.attribute_code SEPARATOR ', ') category_attributes
                FROM md_article_categories a LEFT JOIN md_category_attributes cat ON a.id=cat.id_category
                                             LEFT JOIN md_article_attributes aat ON cat.id_attribute=aat.id_article_attr
                WHERE a.id = :cid
        ";
         $params = array('cid' => $id_categ);
         $result = $conn->executeQuery($sql, $params)->fetch();

         return $result;
    }

    function getChildrenArray(array $criteria, array $order_by=null){
        $elements = array(); $level = 0;
        if(!isset($criteria['parent'])) return false;
        $em = $this->getEntityManager();
        $conn = $em->getConnection();

        if($criteria['parent']>=0){
            $parent = $this->findOneBy(array('id'=>$criteria['parent'], 'companyId'=>$criteria['companyId']));
            if(!is_object($parent)) return false;
            $sql = "SELECT id, name FROM md_article_categories WHERE level=:level AND company_id=:cid AND left_id>:leftid AND right_id<:rightid AND status>0";
            $params = array('level'=>$parent->getLevel()+1, 'cid'=>$criteria['companyId'], 'leftid'=>$parent->getLeftId(), 'rightid'=>$parent->getRightId());
            $level = $parent->getLevel()+1;
        }
        else
        {
            $sql = "SELECT id, name FROM md_article_categories WHERE level=0 AND company_id=:cid";
            $params = array( 'cid'=>$criteria['companyId']);
        }

        $elements['level'] = $level;
        foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
            $elements['entities'][$v['id']] = $v['name'];
        }
        return $elements;
    }

    function getChildrenArrayByUser(array $criteria, array $order_by=null){
        $elements = array(); $level = 0;
        if(!isset($criteria['parent'])) return false;
        $em = $this->getEntityManager();
        $conn = $em->getConnection();

        if($criteria['parent']>=0){
            $parent = $this->findOneBy(array('id'=>$criteria['parent'], 'companyId'=>$criteria['companyId']));
            $level = $parent->getLevel()+1;
            if ($level == 1) {
                $sql = "SELECT a.id, a.name FROM md_article_categories a, um_users_categories b
                WHERE level =1 AND company_id = :cid AND a.id = b.id_category AND b.id_user = :uid
                    AND left_id > :leftid AND right_id < :rightid AND status > 0";
                $params = array('uid' => $criteria['user_id'], 'cid'=>$criteria['companyId'], 'leftid'=>$parent->getLeftId(), 'rightid'=>$parent->getRightId());
                foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
                    $elements['entities'][$v['id']] = $v['name'];
                }
            } else {

                if(!is_object($parent)) return false;
                $sql = "SELECT id, name FROM md_article_categories WHERE level=:level AND company_id=:cid AND left_id>:leftid AND right_id<:rightid AND status>0";
                $params = array('level'=>$parent->getLevel()+1, 'cid'=>$criteria['companyId'], 'leftid'=>$parent->getLeftId(), 'rightid'=>$parent->getRightId());
                //$level = $parent->getLevel()+1;
                foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
                    $elements['entities'][$v['id']] = $v['name'];
                }
            }
        }
        else
        {
            $user_categs = $em->getRepository('AdminUserManagementBundle:UmUsers')->getUserCategories($criteria['user_id']);

            $sql = "SELECT * FROM (
                            SELECT DISTINCT b.id, b.name FROM md_article_categories a, md_article_categories b
                            WHERE b.left_id < a.left_id AND b.right_id > a.right_id AND a.id IN (:cat_id) AND a.company_id = :cid 
                        UNION ALL 
                            SELECT a.id, a.name FROM md_article_categories a WHERE a.id IN (:cat_id) AND a.level = 0 AND a.company_id = :cid 
                        ) x
                        ORDER BY name ";
            $params = array('cat_id' => $user_categs, 'cid'=>$criteria['companyId']);
            $params2 = array(
                'cat_id'       => \Doctrine\DBAL\Connection::PARAM_INT_ARRAY
            );
            $r = $conn->executeQuery($sql, $params, $params2)->fetchAll();

            foreach ($r as $key => $item) {
               $elements['entities'][$item['id']] = $item['name'];
            }
        }

        $elements['level'] = $level;

        return $elements;
    }

    public function getGridData($req_info) {

        $select_string = '';
        $where_string = '';

        $map_results = $req_info['map_results']['select_values'];

        // add new params
        $req_info['map_results']['where_values'][] = 'a.status = ?';
        $req_info['map_results']['bind_values'][] = 1;

       // "COALESCE(GROUP_CONCAT( a2.name SEPARATOR  ' / ' ), CONCAT('(', GROUP_CONCAT( a2.name SEPARATOR  ' / ' ),')'))"

        $req_info['map_results']['select_values'][]     = "CONCAT(REPEAT('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',a.level), a.name, COALESCE(CONCAT(' (',GROUP_CONCAT( a2.name SEPARATOR  ' / ' ),')'), '')) name";
        //$req_info['map_results']['select_values'][]     = "GROUP_CONCAT( a2.name SEPARATOR  ' / ' ) name2";
        //$req_info['map_results']['select_values'][]     = "IF (a.status=1, 'active', 'inactive') AS status";
        $req_info['map_results']['where_values'][]      = 'a.company_id = ?'; // doar articolele pentru compania curenta
        $req_info['map_results']['bind_values'][]       = $req_info['map_results']['selected_company'];

        $select_string  = count($req_info['map_results']['select_values'])>0? implode(' , ',$req_info['map_results']['select_values']):'';
        $where_string   = count($req_info['map_results']['where_values'])>0? ' WHERE '.implode(' AND ',$req_info['map_results']['where_values']):'';

	    $sql = "SELECT SQL_CALC_FOUND_ROWS ".$select_string.", IF(a.margin > 0, a.margin, '') AS margin
	          FROM md_article_categories a
              LEFT JOIN md_article_categories a2 ON a2.left_id < a.left_id AND a2.right_id > a.right_id
              LEFT JOIN nom_companies b ON a.company_id = b.id_company ".$where_string." 
              GROUP BY a.id
	        ORDER BY ".$req_info['sort'].' ' .$req_info['dir']."
	        LIMIT  ".$req_info['start'].", ".$req_info['limit']
	      ;

	    $q = $this->getEntityManager()->getConnection()->prepare($sql);

        if(strlen(trim($where_string)) > 0){
            foreach ($req_info['map_results']['bind_values'] as $key => $value) {
                $q->bindValue($key+1, $value);
            }
        }

	    $q->execute();
	    $results = $q->fetchAll();

	    $sql = "SELECT FOUND_ROWS() FOUND_ROWS";
	    $q = $this->getEntityManager()->getConnection()->prepare($sql);
	    $q->execute();
	    $records_found = $q->fetchAll();

	    $results['results']      = $results;
	    $results['records_found']  = $records_found[0]['FOUND_ROWS'];

	    return $results;
    }

    public function getLeafNodes(array $criteria){
        $elements = array();
        if(!isset($criteria['parent'])) return false;

        $parent = $this->findOneBy(array('id'=>$criteria['parent'], 'companyId'=>$criteria['companyId']));

        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $sql = "SELECT id, name, left_id, right_id FROM md_article_categories WHERE company_id=:cid AND left_id>=:leftid AND right_id<=:rightid AND left_id = right_id-1 AND status>0";
        $params = array('cid'=>$criteria['companyId'], 'leftid'=>$parent->getLeftId(), 'rightid'=>$parent->getRightId());

        foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
            $elements[$v['id']]['name'] = $v['name'];
            $elements[$v['id']]['left_id'] = $v['left_id'];
            $elements[$v['id']]['right_id'] = $v['right_id'];
        }
        return $elements;
    }

    public function getParents($node) {

        $sql = "SELECT * FROM md_article_categories WHERE left_id < ? AND right_id > ? ORDER BY level DESC ";

        $q = $this->getEntityManager()->getConnection()->prepare($sql);
        $q->bindValue(1, $node['left_id']);
        $q->bindValue(2, $node['right_id']);
        $q->execute();
          
        $results = $q->fetchAll();

        return $results;
    }
    
    public function getParentsArray($criteria){
        $elements = array();
        if(!isset($criteria['child'])) return false;
        $em = $this->getEntityManager();
        $conn = $em->getConnection();

        $child = $this->findOneBy(array('id'=>$criteria['child'], 'companyId'=>$criteria['companyId']));
        $sql = "SELECT * FROM md_article_categories WHERE company_id=:cid AND left_id<:leftid AND right_id>:rightid AND status>0 ORDER BY left_id";
        $params = array('cid'=>$criteria['companyId'], 'leftid'=>$child->getLeftId(), 'rightid'=>$child->getRightId());

        foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
            $elements[$v['id']] = $v;
        }
        return $elements;
    }
    
    public function getParentsTree($criteria){
        $parents = $this->getParentsArray($criteria);

        $condition[] = 'level = 0';
        if(!empty($parents)) foreach($parents as $k=>$v){
            $condition[] = '(left_id>'.$v['left_id'].' AND right_id<'.$v['right_id'].' AND level='.($v['level']+1).')';
        }
        $em = $this->getEntityManager();
        $conn = $em->getConnection();

        $sql = 'SELECT * FROM md_article_categories WHERE status>0 AND company_id=:cid AND ('.implode(' OR ', $condition).') ORDER BY level, left_id';

        $params = array('cid'=>$criteria['companyId']);
        foreach($conn->executeQuery($sql, $params)->fetchAll() as $k=>$v){
            $elements[$v['level']][$v['id']] = $v;
            if(in_array($v['id'], array_keys($parents))) $elements[$v['level']][$v['id']]['selected'] = 1;
            else $elements[$v['level']][$v['id']]['selected'] = 0;
            if($v['id'] == $criteria['child']) $elements[$v['level']][$v['id']]['selected'] = 1;
        }
        return $elements;
    }
    
    public function isParent($criteria){
        if(!is_numeric($criteria['id'])) return false;
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $parent = $this->findOneBy(array('id'=>$criteria['id'], 'companyId'=>$criteria['companyId']));
        $sql = "SELECT count(*) as q FROM md_article_categories WHERE company_id=:cid AND left_id>:leftid AND right_id<:rightid AND status>0";
        $params = array('cid'=>$criteria['companyId'], 'leftid'=>$parent->getLeftId(), 'rightid'=>$parent->getRightId());
        $elements = $conn->executeQuery($sql, $params)->fetchAll();
        return $elements[0]['q'] == 0? false:true;
    }

    public function insertCategAttributes($attributes, $category_id, $create_var = null) {
        
        $conn = $this->getEntityManager()->getConnection();
        foreach ($attributes as $key => $attr) {
            $sql = "INSERT INTO md_category_attributes(id_category, id_attribute, active, create_var) VALUES (?, ?, 1, ?)";
            $q = $conn->prepare($sql);
            $q->bindValue(1, $category_id);
            $q->bindValue(2, $attr);
            $q->bindValue(3, (isset($create_var[$key])? $create_var[$key] : 0 ));
            $q->execute();
        }
    }

    public function deleteCategAttributes($category_id) {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "DELETE FROM md_category_attributes WHERE id_category = ?";
        $q = $conn->prepare($sql);
        $q->bindValue(1, $category_id);
        $q->execute();
    }

    public function deleteCategoryAttributes($attr_array, $category_id) {
        if(empty($attr_array)) return false;

        $conn = $this->getEntityManager()->getConnection();

        $sql = "DELETE FROM md_category_attributes WHERE id_category = :category_id AND id_attribute IN (:attr_id) ";
        $params = array(
            'category_id'   => $category_id,
            'attr_id'  => $attr_array
        );
        $params2 = array(
            'attr_id'   => \Doctrine\DBAL\Connection::PARAM_INT_ARRAY
        );
        $conn->executeQuery($sql, $params, $params2);

        return true;
    }

    public function getCategoryAttributes($criteria, $values = null){
        $tpl = '';
        $em = $this->getEntityManager();

        // oldie:
//        $sql = "SELECT b.id_article_attr AS id_attr, b.qty_influence, b.for_logistics, d.text FROM md_category_attributes a 
//                JOIN md_article_attributes b ON a.id_attribute = b.id_article_attr AND b.id_company = :comp_id
//                JOIN trans_languages c ON c.short_lang = :lang_id AND c.active = 1
//                JOIN trans_options d ON d.id_entity = a.id_attribute AND d.id_language = c.id_language
//                WHERE a.active = 1 AND b.active = 1 AND a.id_category = :categ_id";
        // $sql = "SELECT distinct(b.id_article_attr) AS id_attr, b.qty_influence, b.for_logistics, d.text, b.attr_um 
        //         FROM md_category_attributes a 
        //         JOIN md_article_attributes b ON a.id_attribute = b.id_article_attr AND b.id_company = :comp_id
        //         JOIN trans_languages c ON c.short_lang = :lang_id AND c.active = 1
        //         JOIN trans_options d ON d.id_entity = a.id_attribute AND d.id_language = c.id_language
        //         WHERE a.active = 1 AND b.active = 1 AND a.id_category IN (
        //                 SELECT zz.id FROM md_article_categories z 
        //                 LEFT JOIN md_article_categories zz ON zz.left_id<=z.left_id AND zz.right_id>=z.right_id 
        //                 WHERE z.id = :categ_id
        //         )";
        $sql = "SELECT distinct(b.id_article_attr) AS id_attr, b.for_logistics, d.text, b.attr_um, a.create_var as qty_influence, ac.level level
                FROM md_category_attributes a 
                JOIN md_article_attributes b ON a.id_attribute = b.id_article_attr AND b.id_company = :comp_id
                JOIN trans_languages c ON c.short_lang = :lang_id AND c.active = 1
                JOIN trans_options d ON d.id_entity = a.id_attribute AND d.id_language = c.id_language
                JOIN md_article_categories ac ON a.id_category = ac.id
                WHERE a.active = 1 AND b.active = 1 AND a.id_category IN (
                        SELECT zz.id FROM md_article_categories z 
                        LEFT JOIN md_article_categories zz ON zz.left_id<=z.left_id AND zz.right_id>=z.right_id 
                        WHERE z.id = :categ_id
                ) ORDER BY ac.level ASC";
        $params = array('categ_id'  =>  $criteria['category'], 
                        'lang_id'   =>  $criteria['lang_id'], 
                        'comp_id'   =>  $criteria['comp_id']);
        $options = array(); $count = 1;

        $items = $em->getConnection()->executeQuery($sql, $params)->fetchAll();

        foreach($items as $k=>&$v){

             if(isset($options['static'][$v['id_attr']]))
                     unset($options['static'][$v['id_attr']]);

             if(isset($options['qty_infl'][$count]['options'][$v['id_attr']]))
                 unset($options['qty_infl'][$count]['options'][$v['id_attr']]);

            if($v['qty_influence'] == 0){
                $options['static'][$v['id_attr']] = $v;
                if(isset($values[$v['id_attr']])) $options['static'][$v['id_attr']]['value'] = $values[$v['id_attr']];
            }
            else{
                $options['qty_infl'][$count]['options'][$v['id_attr']]['text'] = $v['text'];
                $options['qty_infl'][$count]['options'][$v['id_attr']]['attr_um'] = $v['attr_um'];

                //if(isset($values[$v['id_attr']])) $options['qty_infl'][$count][$v['id_attr']]['value'] = $values[$v['id_attr']];
            }
        }

        if (isset($options['qty_infl']))
            if(count($options['qty_infl'])>0) $options['qty_infl'][$count]['ean'] = ''; /* $options['qty_infl'][$count]['qty'] = ''; */

        return $options;
    }


    public function getAssociatedArticles($criteria){
        $em = $this->getEntityManager();
        $sql = "SELECT id_attribute, GREATEST(art_number, art_number2) AS art_number FROM (
                    SELECT z.id_attribute, max(b.id) AS has_articles, count(a.id_article) AS art_number, count(aa.id_article) AS art_number2
                    FROM md_category_attributes z
                    JOIN md_articles b ON z.id_category = b.category
                    JOIN md_article_categories x ON x.id = z.id_category
                    LEFT JOIN md_article_assigned_attr a ON a.id_attribute = z.id_attribute AND b.id = a.id_article 
                    LEFT JOIN md_article_qty_attr aa ON aa.id_attribute = z.id_attribute AND b.id=aa.id_article
                    WHERE z.id_category = :categid AND x.company_id = :cid
                    GROUP BY id_attribute
                ) x";
        $sql = "SELECT id_attribute, qty_influence, GREATEST(art_number, art_number2) AS art_number FROM (
                    SELECT z.id_attribute, y.qty_influence, count(a.id_article) AS art_number, count(aa.id_article) AS art_number2
                    FROM md_category_attributes z 
                    JOIN md_article_attributes y ON y.id_article_attr = z.id_attribute
                    LEFT JOIN md_articles b ON z.id_category = b.category
                    JOIN md_article_categories x ON x.id = z.id_category
                    LEFT JOIN md_article_assigned_attr a ON a.id_attribute = z.id_attribute AND b.id = a.id_article 
                    LEFT JOIN md_article_qty_attr aa ON aa.id_attribute = z.id_attribute AND b.id=aa.id_article
                    WHERE z.id_category = :categid AND x.company_id = :cid
                    GROUP BY id_attribute, y.qty_influence
                ) t";
        $params = array('categid'=>$criteria['category_id'], 'cid'=>$criteria['company_id']);
        $result = array();

        foreach($em->getConnection()->executeQuery($sql, $params)->fetchAll() as $k=>$v){
            $x = array('id_attr'=>$v['id_attribute'], 'has_articles'=>$v['art_number'], 'qty_influence'=>$v['qty_influence']);
            $result[$v['id_attribute']] = $x;
        }

        return $result;
    }

    public function getCategoriesbyLevel($level_id, $company_id) {

        $em = $this->getEntityManager();

        if ($level_id == 0) {
            $sql = "SELECT a.id, a.name  AS categ_name FROM md_article_categories a
                    WHERE a.level = :level AND a.status = 1 AND a.company_id = :cid
                    ORDER BY categ_name";
            $params = array('level' => $level_id, 'cid' => $company_id);
        } else {
            $sql = "SELECT COALESCE( b.id, a.id ) AS id, CONCAT( a.name, COALESCE( CONCAT(  ' - ', b.name ) ,  '' ) ) AS categ_name
                FROM md_article_categories a
                LEFT JOIN md_article_categories b ON a.left_id < b.left_id AND a.right_id > b.right_id AND b.level = :level1
                WHERE a.level = :level2
                ORDER BY categ_name ";
                $params = array('level1' => $level_id, 'level2' => $level_id-1, 'cid' => $company_id);
        }

        $results = $em->getConnection()->executeQuery($sql, $params)->fetchAll();

        $final = array();
        $final[0] = '------';
        foreach ($results as $key => $result) {
            $final[$result['id']] = $result['categ_name'];
        }

        return $final;
    }

    public function updateSupplierCategories($categories, $supplier_id) {

        $conn = $this->getEntityManager()->getConnection();
        $categories_old = $this->getSupplierCategories($supplier_id);

        foreach ($categories_old as $id_categ => $categ_old) {
            if (!in_array($categ_old, $categories)) {
                $sql = "DELETE FROM md_suppliers_divisions WHERE id_supplier = ? AND id_division = ?";
                $q = $conn->prepare($sql);
                $q->bindValue(1, $supplier_id);
                $q->bindValue(2, $categ_old);
                $q->execute();
            }
        }

        foreach ($categories as $key => $category) {

            if ($category > 0) {

                $sql = "INSERT INTO md_suppliers_divisions (id_supplier, id_division) VALUES (?, ?)
                                    ON DUPLICATE KEY UPDATE
                                    id_supplier = ?, id_division = ? ";
                $q = $conn->prepare($sql);
                $q->bindValue(1, $supplier_id);
                $q->bindValue(2, $category);

                $q->bindValue(3, $supplier_id);
                $q->bindValue(4, $category);
                $q->execute();
            }
        }
    }

    public function getSupplierCategories($supplier_id) {
        $sql = "SELECT id_division FROM md_suppliers_divisions WHERE id_supplier = ?";

        $q = $this->getEntityManager()->getConnection()->prepare($sql);
        $q->bindValue(1, $supplier_id);
        $q->execute();
          
        $results = $q->fetchAll();

        $final = array();
        foreach ($results as $key => $result) {
            $final[] = $result['id_division'];
        }

        return $final;
    }

    public function updateAttribute($id_category, $id_attribute, $create_var){

        $sql = "UPDATE md_category_attributes SET create_var = ? WHERE id_category = ? AND id_attribute = ?";
        $q = $this->getEntityManager()->getConnection()->prepare($sql);
        $q->bindValue(1, $create_var);
        $q->bindValue(2, $id_category);
        $q->bindValue(3, $id_attribute);
        $q->execute();
    }


    public function getCategoryAttrCsv($criteria){

        $em = $this->getEntityManager();
        $sql = " SELECT distinct(b.id_article_attr) AS id_attr, a.create_var as qty_influence, b.attribute_code, mac.level, d.text,  b.attr_um 
            FROM md_article_categories mac 
                 JOIN md_category_attributes a ON mac.id = a.id_category
                 JOIN md_article_attributes b ON a.id_attribute = b.id_article_attr AND b.id_company = :comp_id
                 JOIN trans_languages c ON c.short_lang = :lang_id AND c.active = 1
                 JOIN trans_options d ON d.id_entity = a.id_attribute AND d.id_language = c.id_language
                 WHERE
                    a.id_category IN (
                        SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id<=z.left_id AND zz.right_id>=z.right_id  WHERE z.id = :categ_id
                    UNION
                        SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id > z.left_id AND zz.right_id < z.right_id  WHERE z.id = :categ_id
                ) AND b.active = 1
                  ORDER BY  mac.id, mac.level, b.attribute_code, a.create_var ASC";

        $params = array('categ_id'  =>  $criteria['category'], 
                        'lang_id'   =>  $criteria['lang_id'], 
                        'comp_id'   =>  $criteria['comp_id']);
        $options = array();

        $items = $em->getConnection()->executeQuery($sql, $params)->fetchAll();


        foreach($items as $k=>&$v){

            if(isset($options['static'][$v['id_attr']]))
                unset($options['static'][$v['id_attr']]);
            if(isset($options['qty_infl'][$v['id_attr']]))
                unset($options['qty_infl'][$v['id_attr']]);

            if($v['qty_influence'] == 0)
                $options['static'][$v['id_attr']] = $v;
            else
                $options['qty_infl'][$v['id_attr']] = $v;
        }

        return $options;
    }

    public function categoryHasArticleVariants($comp_id, $categ_id){

        $em = $this->getEntityManager();
        $sql = "SELECT distinct(b.id_article_attr) AS id_attr, a.create_var as qty_influence, b.attribute_code, mac.level, COUNT(ar.id) total_article 
              FROM md_article_categories mac 
                 JOIN md_category_attributes a ON mac.id = a.id_category
                 JOIN md_article_attributes b ON a.id_attribute = b.id_article_attr AND b.id_company = :comp_id
                 JOIN md_articles ar ON ar.category = a.id_category
                 WHERE
                    a.id_category IN (
                        SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id<=z.left_id AND zz.right_id>=z.right_id  WHERE z.id = :categ_id
                    UNION
                        SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id > z.left_id AND zz.right_id < z.right_id  WHERE z.id = :categ_id
                ) AND b.active = 1 AND a.create_var = 1 
              GROUP BY b.id_article_attr 
              ";

        $params = array('categ_id'  =>  $categ_id, 
                      'comp_id'   =>  $comp_id);
        $articles = array();
        $items = $em->getConnection()->executeQuery($sql, $params)->fetchAll();

        foreach ($items as $key => $value) {
            $x = array('id_attr'=>$value['id_attr'], 'has_articles'=>$value['total_article']);
            $articles[$value['id_attr']] = $x;
        }

        return $articles;
    }

    public function categoryHasArticles($comp_id, $categ_id)
    {
        $em = $this->getEntityManager();
        $sql = "SELECT COUNT(ar.id) total_article 
                  FROM md_article_categories mac 
                     JOIN md_articles ar ON ar.category = mac.id
                     WHERE
                        mac.id IN (
                            SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id<=z.left_id AND zz.right_id>=z.right_id  WHERE z.id = :categ_id
                        UNION
                            SELECT zz.id FROM md_article_categories z LEFT JOIN md_article_categories zz ON zz.left_id > z.left_id AND zz.right_id < z.right_id  WHERE z.id = :categ_id
                    ) AND ar.status > 0 AND ar.company_id = :comp_id
              ";
         $params = array('categ_id'  =>  $categ_id, 
                      'comp_id'   =>  $comp_id);
        $articles = array();
        $items = $em->getConnection()->executeQuery($sql, $params)->fetchAll();

        if($items[0]['total_article']>0)
            return true;
        else 
            return false;
    }
}
